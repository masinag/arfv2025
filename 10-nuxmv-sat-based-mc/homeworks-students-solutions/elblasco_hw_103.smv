MODULE main
VAR
  rocks: array 0..6 of {brown, green, empty};
  step: -2..2;
  move: 0..6;

DEFINE
  goal := rocks[0] = green & rocks[1] = green & rocks[2] = green & rocks[3] = empty & rocks[4] = brown & rocks[5] = brown & rocks[6] = brown;

  -- a possible move is considered safe only if the current index plus the proposed jump lays between the array boundaries
  safe_index := move + step <= 6 & move + step >= 0;

  -- If a frog can make a jump of step 2 then it must passes over another frog
  valid_2_steps := ((step = 2 & safe_index) -> (move < 6 & rocks[move + 1] != empty)) &
                   ((step = -2 & safe_index) -> (move < 6 & rocks[move - 1] != empty));

INIT
  rocks[0] = brown &
  rocks[1] = brown &
  rocks[2] = brown &
  rocks[4] = green &
  rocks[5] = green &
  rocks[6] = green &
  rocks[3] = empty;

INVAR -- The current moving (move) plus the jump (step) should be always between the array boundaries
  safe_index;

INVAR -- An empty rock cannot move
  rocks[move] != empty;

INVAR -- The frogs can only move forward
  (rocks[move] = green -> step <= 0) & (rocks[move] = brown -> step >= 0);

INVAR -- The arrival rock must be empty iff the step is not 0
  (step = 0) <-> (rocks[move+step] != empty);

INVAR -- The two steps move is possible only there ia frog in the middle;
  valid_2_steps;

ASSIGN

  -- In this case if the frog is brown and it is trying to go backward it is blocked by the invariants
  next(rocks[0]) := case
	move = 0 & step in {1, 2} & rocks[move + step] = empty : empty;
	move != 0 & rocks[move] = green & move + step = 0 & rocks[0] = empty: green;
	TRUE: rocks[0];
  esac;

  next(rocks[1]) := case
	move = 1 & step in {-1, 1, 2} & rocks[move + step] = empty : empty;
	move != 1 & rocks[move] = green & move + step = 1 & rocks[1] = empty: green;
	move != 1 & rocks[move] = brown & move + step = 1 & rocks[1] = empty: brown;
	TRUE: rocks[1];
  esac;

  next(rocks[2]) := case
	move = 2 & step in {-2, -1, 1, 2} & rocks[move + step] = empty : empty;
	move != 2 & rocks[move] = green & move + step = 2 & rocks[2] = empty: green;
	move != 2 & rocks[move] = brown & move + step = 2 & rocks[2] = empty: brown;
	TRUE: rocks[2];
  esac;

  next(rocks[3]) := case
	move = 3 & step in {-2, -1, 1, 2} & rocks[move + step] = empty : empty;
	move != 3 & rocks[move] = green & move + step = 3 & rocks[3] = empty: green;
	move != 3 & rocks[move] = brown & move + step = 3 & rocks[3] = empty: brown;
	TRUE: rocks[3];
  esac;

  next(rocks[4]) := case
	move = 4 & step in {-2, -1, 1, 2} & rocks[move + step] = empty : empty;
	move != 4 & rocks[move] = green & move + step = 4 & rocks[4] = empty: green;
	move != 4 & rocks[move] = brown & move + step = 4 & rocks[4] = empty: brown;
	TRUE: rocks[4];
  esac;

  next(rocks[5]) := case
	move = 5 & step in {-2, -1, 1} & rocks[move + step] = empty : empty;
	move != 5 & rocks[move] = green & move + step = 5 & rocks[5] = empty: green;
	move != 5 & rocks[move] = brown & move + step = 5 & rocks[5] = empty: brown;
	TRUE: rocks[5];
  esac;

  next(rocks[6]) := case
	move = 6 & step in {-2, -1} & rocks[move + step] = empty : empty;
	move != 6 & rocks[move] = green & move + step = 6 & rocks[6] = empty: green;
	move != 6 & rocks[move] = brown & move + step = 6 & rocks[6] = empty: brown;
	TRUE: rocks[6];
  esac;

LTLSPEC
  !(F goal);
